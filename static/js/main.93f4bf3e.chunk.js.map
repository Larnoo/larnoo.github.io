{"version":3,"sources":["App.tsx","serviceWorker.js","index.js"],"names":["startTime","dayjs","toDate","list","parsePath","o","person","path","Map","Object","keys","forEach","key","date","locations","map","item","lat","lng","address","time","set","getTime","App","props","context","stepCount","endTime","Date","requestFrameId","frameTime","icon","BMap","Icon","Size","imageSize","yellowIcon","state","currentTime","currentData","Set","height","secondPerson","i","data","length","push","name","age","sex","myParentNCP","info","reportTime","readJson","this","update","isFirst","requestAnimationFrame","console","log","updateNCP","cancelAnimationFrame","marks","position","currentLocation","style","width","center","zoom","window","innerHeight","right","top","justifyContent","display","alignItems","alignContent","format","size","result","Array","day","setFullYear","getFullYear","getMonth","getDate","setHours","has","get","j","location","locationTime","filterPersonByDate","newData","p","add","setState","React","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.93f4bf3e.chunk.js","sourcesContent":["import './App.css';\nimport * as React from \"react\";\nimport data from './data/data.json';\n// @ts-ignore\nimport {Map as BMapComponent, Marker, Circle, NavigationControl, InfoWindow} from \"react-bmap\"\nimport {Location, Person} from \"./data/model\";\nimport dayjs from \"dayjs\";\nimport {CSSProperties} from \"react\";\n\ninterface State {\n    currentData: Set<Person>;\n    currentTime: Date;\n    height: number;\n    secondPerson: number;\n}\n\nconst startTime = dayjs('2020-01-10').toDate();\nconst TimeStep: number = 3600 * 24 * 1000;\nconst AnimationDuration: number = 200;\nconst list: Array<Person> = [];\n\nfunction readJson() {\n    for (let i = 0; i < data.length; i++) {\n        // @ts-ignore\n        let person: Person = {};\n        list.push(person);\n        let item = data[i];\n        person.name = item.name;\n        person.age = item.age;\n        person.sex = item.sex;\n        person.address = item.address;\n        person.myParentNCP = item.myParentNCP;\n        person.info = item.info;\n        person.reportTime = dayjs(item.reportTime).toDate();\n        parsePath(item, person);\n    }\n}\n\nfunction parsePath(o: any, person: Person): void {\n    const path: object = o.path;\n    person.path = new Map<number, Array<Location>>();\n    const keys: string[] = Object.keys(path);\n    keys.forEach(key => {\n        const date = dayjs(key).toDate();\n        // @ts-ignore\n        const array: Array<any> = path[key];\n        const locations: Array<Location> = array.map(item => {\n            return {\n                lat: item.lat,\n                lng: item.lng,\n                address: item.address,\n                time: dayjs(item.time).toDate()\n            }\n        });\n        person.path.set(date.getTime(), locations);\n    });\n}\n\nfunction filterPersonByDate(time: Date, list: Array<Person>): Array<Person> {\n    const result: Array<Person> = new Array<Person>();\n    const day = new Date();\n    day.setFullYear(time.getFullYear(), time.getMonth(), time.getDate());\n    day.setHours(0, 0, 0, 0);\n    console.log('xx', dayjs(day).format('YYYY-MM-DD HH:mm:ss'));\n    console.log('xx list x');\n    for (let i = 0; i < list.length; i++) {\n        console.log('xx list');\n        let person = list[i];\n        if (person.path.has(day.getTime())) {\n            console.log('xx path.has(day)');\n            // @ts-ignore\n            const locations: Array<Location> = person.path.get(day.getTime());\n            for (let j = 0; j < locations.length; j++) {\n                const location = locations[j];\n                let locationTime: number = location.time.getTime();\n                let currentTime = time.getTime();\n                if (currentTime <= locationTime && (currentTime + TimeStep) > locationTime) {\n                    console.log('xx location.has(time)');\n                    person.currentLocation = location;\n                    result.push(person);\n                    break;\n                }\n            }\n        }\n    }\n    return result;\n}\n\nexport class App extends React.PureComponent<any, State> {\n    private stepCount: number = 0;\n    private endTime = new Date();\n    private requestFrameId: undefined | number;\n    private frameTime: number = 0;\n    // @ts-ignore\n    private icon = new BMap.Icon('/dot.png', new BMap.Size(32, 32), {\n        // @ts-ignore\n        imageSize: new BMap.Size(32, 32)\n    });\n    // @ts-ignore\n    private yellowIcon = new BMap.Icon('/yellow.png', new BMap.Size(32, 32), {\n        // @ts-ignore\n        imageSize: new BMap.Size(32, 32)\n    });\n\n    constructor(props: any, context: any) {\n        super(props, context);\n        this.state = {\n            currentTime: startTime,\n            currentData: new Set<Person>(),\n            height: 0,\n            secondPerson: 0\n        }\n    }\n\n    componentDidMount(): void {\n        readJson();\n        this.update(true);\n    }\n\n    private update(isFirst?: boolean) {\n        this.requestFrameId = requestAnimationFrame((time: number) => {\n            if (((time - this.frameTime > AnimationDuration) || isFirst) && this.state.currentTime.getTime() < this.endTime.getTime()) {\n                console.log('requestAnimationFrame', time, 'xxx');\n                this.frameTime = time;\n                this.updateNCP(new Date(this.state.currentTime.getTime()+TimeStep));\n            }\n            this.update();\n        });\n    }\n\n    componentWillUnmount(): void {\n        if (this.requestFrameId) {\n            cancelAnimationFrame(this.requestFrameId);\n        }\n    }\n\n    render() {\n        const marks: Array<any> = [];\n        this.state.currentData.forEach(person => {\n            const icon = person.myParentNCP ? this.yellowIcon : this.icon;\n            marks.push(<Marker position={{lng: person.currentLocation.lng, lat: person.currentLocation.lat}}\n                               icon={icon}/>);\n        });\n        console.log('render', marks.length);\n        return <div style={{height: '100%', width: '100%'}}>\n            <BMapComponent center={{lng: 114, lat: 32}} zoom={7} style={{height: window.innerHeight}}>\n                {marks}\n                <NavigationControl/>\n            </BMapComponent>\n            <div style={{\n                position: 'absolute',\n                right: 0,\n                top: 0,\n                height: '30',\n                justifyContent: 'center',\n                display: 'flex',\n                width: '100%',\n                alignItems: 'flex-start',\n                alignContent: 'center'\n            }}>{dayjs(this.state.currentTime).format(\"YYYY-MM-DD HH:mm:ss\")\n            +', 武汉输入：' +(this.state.currentData.size-this.state.secondPerson)+', 被传染：'+this.state.secondPerson}</div>\n        </div>;\n    }\n\n    private updateNCP(time: Date): void {\n        const currentData = filterPersonByDate(time, list);\n        console.log('updateNCP', currentData.length);\n        const newData = new Set(this.state.currentData);\n        currentData.forEach(p => {\n            newData.add(p);\n        });\n        let secondPerson = 0;\n        newData.forEach(p=>{\n            if(p.myParentNCP){\n                secondPerson++;\n            }\n        });\n        this.setState({\n            currentData: newData,\n            currentTime: time,\n            secondPerson: secondPerson\n        });\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
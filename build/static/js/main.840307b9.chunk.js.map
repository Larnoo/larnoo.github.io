{"version":3,"sources":["App.tsx","serviceWorker.js","index.js"],"names":["startTime","dayjs","toDate","list","parsePath","o","person","path","Map","Object","keys","forEach","key","date","locations","map","item","lat","lng","address","time","set","getTime","App","props","context","stepCount","endTime","Date","requestFrameId","frameTime","icon","BMap","Icon","Size","imageSize","state","currentTime","currentData","Set","height","i","data","length","push","name","age","sex","myParentNCP","info","reportTime","readJson","this","update","requestAnimationFrame","console","log","updateNCP","cancelAnimationFrame","marks","position","currentLocation","imageUrl","style","width","center","zoom","window","innerHeight","right","top","justifyContent","display","alignItems","alignContent","format","result","Array","day","setFullYear","getFullYear","getMonth","getDate","setHours","has","get","j","location","locationTime","filterPersonByDate","newData","p","add","setState","React","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.840307b9.chunk.js","sourcesContent":["import './App.css';\nimport * as React from \"react\";\nimport data from './data/data.json';\n// @ts-ignore\nimport {Map as BMapComponent, Marker, Circle, NavigationControl, InfoWindow} from \"react-bmap\"\nimport {Location, Person} from \"./data/model\";\nimport dayjs from \"dayjs\";\nimport {CSSProperties} from \"react\";\n\ninterface State {\n    currentData: Set<Person>;\n    currentTime: Date;\n    height: number;\n}\n\nconst startTime = dayjs('2020-01-11').toDate();\nconst TimeStep: number = 3600 * 24 * 1000;\nconst list: Array<Person> = [];\n\nfunction readJson() {\n    for (let i = 0; i < data.length; i++) {\n        // @ts-ignore\n        let person: Person = {};\n        list.push(person);\n        let item = data[i];\n        person.name = item.name;\n        person.age = item.age;\n        person.sex = item.sex;\n        person.address = item.address;\n        person.myParentNCP = item.myParentNCP;\n        person.info = item.info;\n        person.reportTime = dayjs(item.reportTime).toDate();\n        parsePath(item, person);\n    }\n}\n\nfunction parsePath(o: any, person: Person): void {\n    const path: object = o.path;\n    person.path = new Map<number, Array<Location>>();\n    const keys: string[] = Object.keys(path);\n    keys.forEach(key => {\n        const date = dayjs(key).toDate();\n        // @ts-ignore\n        const array: Array<any> = path[key];\n        const locations: Array<Location> = array.map(item => {\n            return {\n                lat: item.lat,\n                lng: item.lng,\n                address: item.address,\n                time: dayjs(item.time).toDate()\n            }\n        });\n        person.path.set(date.getTime(), locations);\n    });\n}\n\nfunction filterPersonByDate(time: Date, list: Array<Person>): Array<Person> {\n    const result: Array<Person> = new Array<Person>();\n    const day = new Date();\n    day.setFullYear(time.getFullYear(), time.getMonth(), time.getDate());\n    day.setHours(0, 0, 0, 0);\n    console.log('xx', dayjs(day).format('YYYY-MM-DD HH:mm:ss'));\n    console.log('xx list x');\n    for (let i = 0; i < list.length; i++) {\n        console.log('xx list');\n        let person = list[i];\n        if (person.path.has(day.getTime())) {\n            console.log('xx path.has(day)');\n            // @ts-ignore\n            const locations: Array<Location> = person.path.get(day.getTime());\n            for (let j = 0; j < locations.length; j++) {\n                const location = locations[j];\n                let locationTime: number = location.time.getTime();\n                let currentTime = time.getTime();\n                if (currentTime <= locationTime && (currentTime + TimeStep) > locationTime) {\n                    console.log('xx location.has(time)');\n                    person.currentLocation = location;\n                    result.push(person);\n                    break;\n                }\n            }\n        }\n    }\n    return result;\n}\n\nexport class App extends React.PureComponent<any, State> {\n    private stepCount: number = 0;\n    private endTime = new Date();\n    private requestFrameId: undefined | number;\n    private frameTime: number = 0;\n    // @ts-ignore\n    private icon = new BMap.Icon('public/dot.png', new BMap.Size(32, 32), {\n        // @ts-ignore\n        imageSize: new BMap.Size(32, 32)\n    });\n\n    constructor(props: any, context: any) {\n        super(props, context);\n        this.state = {\n            currentTime: startTime,\n            currentData: new Set<Person>(),\n            height: 0\n        }\n    }\n\n    componentDidMount(): void {\n        readJson();\n        this.update();\n    }\n\n    private update() {\n        this.requestFrameId = requestAnimationFrame((time: number) => {\n            if (time - this.frameTime > 1000) {\n                console.log('requestAnimationFrame', time, 'xxx');\n                this.frameTime = time;\n                this.updateNCP(new Date(this.state.currentTime.getTime()+TimeStep));\n            }\n            this.update();\n        });\n    }\n\n    componentWillUnmount(): void {\n        if (this.requestFrameId) {\n            cancelAnimationFrame(this.requestFrameId);\n        }\n    }\n\n    render() {\n        const marks: Array<any> = [];\n        this.state.currentData.forEach(person => {\n            marks.push(<Marker position={{lng: person.currentLocation.lng, lat: person.currentLocation.lat}}\n                               icon={{imageUrl: '/dot.png'}}/>);\n        });\n        console.log('render', marks.length);\n        return <div style={{height: '100%', width: '100%'}}>\n            <BMapComponent center={{lng: 114, lat: 32}} zoom={7} style={{height: window.innerHeight}}>\n                {marks}\n                <NavigationControl/>\n            </BMapComponent>\n            <div style={{\n                position: 'absolute',\n                right: 0,\n                top: 0,\n                height: '30',\n                justifyContent: 'center',\n                display: 'flex',\n                width: '100%',\n                alignItems: 'flex-start',\n                alignContent: 'center'\n            }}>{dayjs(this.state.currentTime).format(\"YYYY-MM-DD HH:mm:ss\")}</div>\n        </div>;\n    }\n\n    private updateNCP(time: Date): void {\n        const currentData = filterPersonByDate(time, list);\n        console.log('updateNCP', currentData.length);\n        const newData = new Set(this.state.currentData);\n        currentData.forEach(p => {\n            newData.add(p);\n        });\n        this.setState({\n            currentData: newData,\n            currentTime: time\n        });\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}